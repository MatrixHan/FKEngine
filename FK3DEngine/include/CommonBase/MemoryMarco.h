/********************************************************************
*
*	本文件是FKMMORPG的一部分。本文件版权归属FreeKnightDuzhi(王宏张)所有。
*	E-mail: duzhi5368@163.com
*	QQ: 	281862942
* 	
*	-----------------------------------------------------------------
*
*	文件名：	MemoryMarco
*	作者：		FreeKnightDuzhi[ 王宏张 ]
*	文件说明：	内存管理器宏定义
*
*	修改人:		
*	修改内容:
*********************************************************************/

#pragma once

//==================================================================================================================
//如果定义了使用新的内存管理函数标志
#ifdef FK_MEMORY_MANAGER
//==================================================================================================================

//==================================================================================================================
//如果为调试模式内存管理器
#if FK_MEMORY_MANAGER == FK_DEBUG_MEMORY_MANAGER
//==================================================================================================================


//==================================================================================================================
//防止重复声明新的 new、delete 操作符
#ifndef FK_DECLAED_NEW_DEL_OP
#define FK_DECLAED_NEW_DEL_OP
//==================================================================================================================

	//--------------------------------------------------------------------------------------------------------------
	FKInline void* operator new ( size_t MemSize, const char* FileName, const char* Function, const int Line )
	{
		return FK3DEngine::MemoryManager::sMemoryManager.Malloc( MemSize, FileName, Function, Line );
	}
	//--------------------------------------------------------------------------------------------------------------
	FKInline void* operator new[] ( size_t MemSize, const char* FileName, const char* Function, const int Line )
	{
		return FK3DEngine::MemoryManager::sMemoryManager.Malloc( MemSize, FileName, Function, Line );
	}
	//--------------------------------------------------------------------------------------------------------------
	FKInline void operator delete ( void* pMem, const char* FileName, const char* Function, const int Line )
	{
		FK3DEngine::MemoryManager::sMemoryManager.Free( pMem, FileName, Function, Line );
	}
	//--------------------------------------------------------------------------------------------------------------
	FKInline void operator delete[] ( void* pMem, const char* FileName, const char* Function, const int Line )
	{
		FK3DEngine::MemoryManager::sMemoryManager.Free( pMem, FileName, Function, Line );
	}
	//--------------------------------------------------------------------------------------------------------------
	FKInline void operator delete ( void* pMem )
	{
		FK3DEngine::MemoryManager::sMemoryManager.Free( pMem, "Unknown", "Unknown", 0 );
	}
	//--------------------------------------------------------------------------------------------------------------
	FKInline void operator delete[] ( void* pMem )
	{
		FK3DEngine::MemoryManager::sMemoryManager.Free( pMem, "Unknown", "Unknown", 0 );
	}
	//--------------------------------------------------------------------------------------------------------------

//==================================================================================================================
#endif	/* #ifndef FK_DECLAED_NEW_DEL_OP */
//==================================================================================================================


//==================================================================================================================
//标志声明了新的内存管理宏
#ifndef FK_DEFINED_NEW_MEMORY_MACRO
#define FK_DEFINED_NEW_MEMORY_MACRO
//==================================================================================================================

	#pragma message ( "新的内存管理宏已被定义" )

	//存储原有内存管理宏
	#pragma push_macro( "new" )
	#pragma push_macro( "delete" )
	#pragma push_macro( "malloc" )
	#pragma push_macro( "realloc" )
	#pragma push_macro( "free" )

	//撤销原有内存管理宏
	#undef new
	#undef delete

	#undef malloc
	#undef realloc
	#undef free

	//重新定义内存管理宏
	#define new							new( __FILE__, __FUNCSIG__, __LINE__ )
	#define delete						delete

	#define malloc( Size )				FK_Malloc( Size, __FILE__, __FUNCSIG__, __LINE__ )
	#define realloc( Address, Size )	FK_Realloc( Address, Size, __FILE__, __FUNCSIG__, __LINE__ )
	#define free( Address )				FK_Free( Address, __FILE__, __FUNCSIG__, __LINE__ )

//==================================================================================================================
#endif /* #ifndef FK_DEFINED_NEW_MEMORY_MACRO */
//==================================================================================================================


//==================================================================================================================
//如果为发布模式内存管理器
#else if FK_MEMORY_MANAGER == FK_RELEASE_MEMORY_MANAGER
//==================================================================================================================


//==================================================================================================================
//防止重复声明新的 new、delete 操作符
#ifndef FK_DECLAED_NEW_DEL_OP
#define FK_DECLAED_NEW_DEL_OP
//==================================================================================================================

//--------------------------------------------------------------------------------------------------------------
FKInline void* operator new ( size_t MemSize )
{
	return FK3DEngine::FK_Malloc( MemSize );
}
//--------------------------------------------------------------------------------------------------------------
FKInline void* operator new[] ( size_t MemSize )
{
	return FK3DEngine::FK_Malloc( MemSize );
}
//--------------------------------------------------------------------------------------------------------------
FKInline void operator delete ( void* pMem )
{
	FK3DEngine::FK_Free( pMem );
}
//--------------------------------------------------------------------------------------------------------------
FKInline void operator delete[] ( void* pMem )
{
	FK3DEngine::FK_Free( pMem );
}
//--------------------------------------------------------------------------------------------------------------

//==================================================================================================================
#endif	/* #ifndef FK_DECLAED_NEW_DEL_OP */
//==================================================================================================================


//==================================================================================================================
//标志声明了新的内存管理宏
#ifndef FK_DEFINED_NEW_MEMORY_MACRO
#define FK_DEFINED_NEW_MEMORY_MACRO
//==================================================================================================================

#pragma message ( "新的内存管理宏已被定义" )

//存储原有内存管理宏
#pragma push_macro( "new" )
#pragma push_macro( "delete" )
#pragma push_macro( "malloc" )
#pragma push_macro( "realloc" )
#pragma push_macro( "free" )

//撤销原有内存管理宏
#undef new
#undef delete

#undef malloc
#undef realloc
#undef free

//重新定义内存管理宏
#define new							new
#define delete						delete

#define malloc( Size )				FK_Malloc( Size )
#define realloc( Address, Size )	FK_Realloc( Address, Size )
#define free( Address )				FK_Free( Address )

//==================================================================================================================
#endif /* #ifndef FK_DEFINED_NEW_MEMORY_MACRO */
//==================================================================================================================


//==================================================================================================================
#endif	/* #if FK_MEMORY_MANAGER == FK_DEBUG_MEMORY_MANAGER */
//==================================================================================================================

//==================================================================================================================
#endif	/* #ifdef FK_MEMORY_MANAGER */
//==================================================================================================================
