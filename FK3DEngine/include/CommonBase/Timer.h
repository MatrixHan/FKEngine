/********************************************************************
*
*	本文件是FKMMORPG的一部分。本文件版权归属FreeKnightDuzhi(王宏张)所有。
*	E-mail: duzhi5368@163.com
*	QQ: 	281862942
* 	
*	-----------------------------------------------------------------
*
*	文件名：	Timer
*	作者：		FreeKnightDuzhi[ 王宏张 ]
*	文件说明：	计时器类
*
*	修改人:		
*	修改内容:
*********************************************************************/

#pragma once

/*---------------------------------------------------------------------------------------------
	使用说明：

	数据类型 LARGE_INTEGER 既可以是一个作为 8 字节长的整型数，
	也可以是作为两个 4 字节长的整型数的联合结构，
	其具体用法根据编译器是否支持64位而定。

	通过 QueryPerformanceFrequency() 函数得到的时钟频率总为 1193180Hz，
	它来自 8253 定时器，是从 40h、41h 读的定时器，
	当这个定时器递增到 65536 是就产生时钟中断，
	而时钟中断的周期是 55ms。
---------------------------------------------------------------------------------------------*/


//==================================================================================================================

namespace FK3DEngine
{
	//--------------------------------------------------------------------------------------------------------------

	//设置计时时间格式基本常量
	#define TIMER_UNIT_SECOND		1		//以秒作单位
	#define TIMER_UNIT_MILLISECOND	1000	//以毫秒作单位（千分之一秒）
	#define TIMER_UNIT_MICROSECOND	1000000	//以微秒作单位（百万分之一秒）

	//--------------------------------------------------------------------------------------------------------------
	//计时器类
	class FK_DLL Timer
	{
	protected:
		static __int64	m_sTimerFrequency;	//一秒钟内的时钟频率（震荡次数）
		__int64			m_BeginTime;		//计时开始时间
		__int64			m_PauseTime;		//暂停计时时间
		DWORD			m_dwPrecision;		//时间格式值（默认值1000）如此值为 1000 则返回时间值单位为毫秒
		bool			m_bIsPause;			//是否暂停计时的标志

	public:
		Timer();
		~Timer();

		//重新开始计时
		void FKFastcall Start();

		//获取计时时间
		DWORD FKFastcall GetTime();

		//获取计时时间
		float FKFastcall GetTimeDouble();

		//暂停计时
		void FKFastcall Pause();

		//获取是否暂停了计时
		bool FKFastcall IsPaused();

		//撤消暂停计时
		void FKFastcall Resume();

		//设置时间格式
		void FKFastcall SetFormat( const DWORD dwPrecision );
	};
	//--------------------------------------------------------------------------------------------------------------
}

//==================================================================================================================
